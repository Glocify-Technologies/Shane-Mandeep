//
// TranierAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TranierAPI {
    /**
     Get Tranier Profile
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tranierGetGetTranierProfile(accept: String, completion: @escaping ((_ data: TranierGetTranierProfileResponse?,_ error: Error?) -> Void)) {
        tranierGetGetTranierProfileWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Tranier Profile
     - GET /tranier/get
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<TranierGetTranierProfileResponse> 
     */
    open class func tranierGetGetTranierProfileWithRequestBuilder(accept: String) -> RequestBuilder<TranierGetTranierProfileResponse> {
        let path = "/tranier/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TranierGetTranierProfileResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Trainers List
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tranierGetTrainersList(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: TranierTrainersListResponse?,_ error: Error?) -> Void)) {
        tranierGetTrainersListWithRequestBuilder(accept: accept, q: q, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainers List
     - GET /tranier/all
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse> 
     */
    open class func tranierGetTrainersListWithRequestBuilder(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<TranierTrainersListResponse> {
        let path = "/tranier/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TranierTrainersListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     view Tranier
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter _id: (query) trainer id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tranierGetViewTranier(accept: String, _id: String? = nil, completion: @escaping ((_ data: TranierViewTranierResponse?,_ error: Error?) -> Void)) {
        tranierGetViewTranierWithRequestBuilder(accept: accept, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     view Tranier
     - GET /tranier
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter _id: (query) trainer id (optional)

     - returns: RequestBuilder<TranierViewTranierResponse> 
     */
    open class func tranierGetViewTranierWithRequestBuilder(accept: String, _id: String? = nil) -> RequestBuilder<TranierViewTranierResponse> {
        let path = "/tranier"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TranierViewTranierResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}

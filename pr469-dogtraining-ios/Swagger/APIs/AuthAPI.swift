//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Email Verification
     
     - parameter code: (path) Verification Code 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authGetEmailVerification(code: Int, accept: String, completion: @escaping ((_ data: AuthEmailVerificationResponse?,_ error: Error?) -> Void)) {
        authGetEmailVerificationWithRequestBuilder(code: code, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Email Verification
     - GET /verify-email/{code}
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter code: (path) Verification Code 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<AuthEmailVerificationResponse> 
     */
    open class func authGetEmailVerificationWithRequestBuilder(code: Int, accept: String) -> RequestBuilder<AuthEmailVerificationResponse> {
        var path = "/verify-email/{code}"
        let codePreEscape = "\(code)"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthEmailVerificationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Logout
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authGetLogout(accept: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        authGetLogoutWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Logout
     - GET /logout
     - Logout the user from current device
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func authGetLogoutWithRequestBuilder(accept: String) -> RequestBuilder<SuccessResponse> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Resend Verification Code
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authGetResendVerificationCode(accept: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        authGetResendVerificationCodeWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resend Verification Code
     - GET /resend-code
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func authGetResendVerificationCodeWithRequestBuilder(accept: String) -> RequestBuilder<SuccessResponse> {
        let path = "/resend-code"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Login
     
     - parameter accept: (header) &#x60;application/json&#x60; 
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password 
     - parameter devicePushToken: (form) Unique push token for the device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authPostLogin(accept: String, deviceId: String, deviceType: String, email: String, password: String, devicePushToken: String? = nil, completion: @escaping ((_ data: AuthLoginResponse?,_ error: Error?) -> Void)) {
        authPostLoginWithRequestBuilder(accept: accept, deviceId: deviceId, deviceType: deviceType, email: email, password: password, devicePushToken: devicePushToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Login
     - POST /login
     - 
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) &#x60;application/json&#x60; 
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter email: (form) Email 
     - parameter password: (form) Password 
     - parameter devicePushToken: (form) Unique push token for the device (optional)

     - returns: RequestBuilder<AuthLoginResponse> 
     */
    open class func authPostLoginWithRequestBuilder(accept: String, deviceId: String, deviceType: String, email: String, password: String, devicePushToken: String? = nil) -> RequestBuilder<AuthLoginResponse> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "device_id": deviceId,
            "device_type": deviceType,
            "device_push_token": devicePushToken,
            "email": email,
            "password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthLoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Register
     
     - parameter accept: (header) &#x60;application/json&#x60; 
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter userRole: (form) User role USER,TRAINER 
     - parameter email: (form) Email address of user 
     - parameter password: (form) Password. Must be at least 8 characters. 
     - parameter devicePushToken: (form) Unique push token for the device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authPostRegister(accept: String, deviceId: String, deviceType: String, userRole: String, email: String, password: String, devicePushToken: String? = nil, completion: @escaping ((_ data: AuthRegisterResponse?,_ error: Error?) -> Void)) {
        authPostRegisterWithRequestBuilder(accept: accept, deviceId: deviceId, deviceType: deviceType, userRole: userRole, email: email, password: password, devicePushToken: devicePushToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register
     - POST /register
     - This endpoint registers a user.If you need to update a profile image, upload the profile image in thebackground using `/avatar` endpoint.
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) &#x60;application/json&#x60; 
     - parameter deviceId: (form) Unique ID of the device 
     - parameter deviceType: (form) Type of the device &#x60;APPLE&#x60; or &#x60;ANDROID&#x60; 
     - parameter userRole: (form) User role USER,TRAINER 
     - parameter email: (form) Email address of user 
     - parameter password: (form) Password. Must be at least 8 characters. 
     - parameter devicePushToken: (form) Unique push token for the device (optional)

     - returns: RequestBuilder<AuthRegisterResponse> 
     */
    open class func authPostRegisterWithRequestBuilder(accept: String, deviceId: String, deviceType: String, userRole: String, email: String, password: String, devicePushToken: String? = nil) -> RequestBuilder<AuthRegisterResponse> {
        let path = "/register"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "device_id": deviceId,
            "device_type": deviceType,
            "device_push_token": devicePushToken,
            "user_role": userRole,
            "email": email,
            "password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthRegisterResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update Password
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authPostUpdatePassword(password: String, currentPassword: String, passwordConfirmation: String, accept: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        authPostUpdatePasswordWithRequestBuilder(password: password, currentPassword: currentPassword, passwordConfirmation: passwordConfirmation, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Password
     - POST /password/edit
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter password: (form) Password 
     - parameter currentPassword: (form) Current password 
     - parameter passwordConfirmation: (form) Password confirmation 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func authPostUpdatePasswordWithRequestBuilder(password: String, currentPassword: String, passwordConfirmation: String, accept: String) -> RequestBuilder<SuccessResponse> {
        let path = "/password/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "password": password,
            "current_password": currentPassword,
            "password_confirmation": passwordConfirmation
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}

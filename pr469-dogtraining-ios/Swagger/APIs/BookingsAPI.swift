//
// BookingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BookingsAPI {
    /**
     Get All Pending Bookings
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter q: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bookingsGetGetAllPendingBookings(accept: String, page: Int? = nil, perPage: Int? = nil, q: String? = nil, completion: @escaping ((_ data: BookingsGetAllPendingBookingsResponse?,_ error: Error?) -> Void)) {
        bookingsGetGetAllPendingBookingsWithRequestBuilder(accept: accept, page: page, perPage: perPage, q: q).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get All Pending Bookings
     - GET /booking/pending
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter q: (query) Search query (optional)

     - returns: RequestBuilder<BookingsGetAllPendingBookingsResponse> 
     */
    open class func bookingsGetGetAllPendingBookingsWithRequestBuilder(accept: String, page: Int? = nil, perPage: Int? = nil, q: String? = nil) -> RequestBuilder<BookingsGetAllPendingBookingsResponse> {
        let path = "/booking/pending"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "q": q
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingsGetAllPendingBookingsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get confirm Bookings
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter q: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bookingsGetGetConfirmBookings(accept: String, page: Int? = nil, perPage: Int? = nil, q: String? = nil, completion: @escaping ((_ data: BookingsGetConfirmBookingsResponse?,_ error: Error?) -> Void)) {
        bookingsGetGetConfirmBookingsWithRequestBuilder(accept: accept, page: page, perPage: perPage, q: q).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get confirm Bookings
     - GET /booking/confirm
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter q: (query) Search query (optional)

     - returns: RequestBuilder<BookingsGetConfirmBookingsResponse> 
     */
    open class func bookingsGetGetConfirmBookingsWithRequestBuilder(accept: String, page: Int? = nil, perPage: Int? = nil, q: String? = nil) -> RequestBuilder<BookingsGetConfirmBookingsResponse> {
        let path = "/booking/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "q": q
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingsGetConfirmBookingsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Add new Booking
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter trainerId: (form) trainer id  (optional)
     - parameter date: (form) date (optional)
     - parameter serviceId: (form) service Id (optional)
     - parameter time: (form) time (optional)
     - parameter petProfileId: (form) pet profile id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bookingsPostAddNewBooking(accept: String, trainerId: String? = nil, date: String? = nil, serviceId: String? = nil, time: String? = nil, petProfileId: String? = nil, completion: @escaping ((_ data: BookingsAddNewBookingResponse?,_ error: Error?) -> Void)) {
        bookingsPostAddNewBookingWithRequestBuilder(accept: accept, trainerId: trainerId, date: date, serviceId: serviceId, time: time, petProfileId: petProfileId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new Booking
     - POST /booking
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter trainerId: (form) trainer id  (optional)
     - parameter date: (form) date (optional)
     - parameter serviceId: (form) service Id (optional)
     - parameter time: (form) time (optional)
     - parameter petProfileId: (form) pet profile id (optional)

     - returns: RequestBuilder<BookingsAddNewBookingResponse> 
     */
    open class func bookingsPostAddNewBookingWithRequestBuilder(accept: String, trainerId: String? = nil, date: String? = nil, serviceId: String? = nil, time: String? = nil, petProfileId: String? = nil) -> RequestBuilder<BookingsAddNewBookingResponse> {
        let path = "/booking"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "trainer_id": trainerId,
            "date": date,
            "service_id": serviceId,
            "time": time,
            "pet_profile_id": petProfileId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingsAddNewBookingResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    
    /**
     Booking List
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBookingList(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: BookingListResponse?,_ error: Error?) -> Void)) {
        getBookingListWithRequestBuilder(accept: accept, q: q, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainers List
     - GET /tranier/all
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */
    open class func getBookingListWithRequestBuilder(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<BookingListResponse> {
        let path = "/booking/Trainer/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q,
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Confirm Booking List
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfirmBookingList(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: BookingListResponse?,_ error: Error?) -> Void)) {
        getConfirmBookingListWithRequestBuilder(accept: accept, q: q, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainers List
     - GET /tranier/all
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */
    open class func getConfirmBookingListWithRequestBuilder(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<BookingListResponse> {
        let path = "/booking/Trainer/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q,
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    
    /**
     Get All Availabe Services
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameterdateq: (query) date (optional)
     
     */
    open class func  GetAllAvailabeServices(accept: String, date: String? = nil, serviceId: String? = nil,trainerId: String? = nil, completion: @escaping ((_ data: GetAvailabilityResponse?,_ error: Error?) -> Void)) {
        GetAllAvailabeServicesWithRequestBuilder(accept: accept, date: date,serviceId: serviceId,trainerId: trainerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainers List
     - GET /tranier/all
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */
    open class func GetAllAvailabeServicesWithRequestBuilder(accept: String, date: String? = nil, serviceId: String? = nil,trainerId: String? = nil) -> RequestBuilder<GetAvailabilityResponse> {
        let path = "/availability/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": date,
            "service_id": serviceId,
            "trainer_id":trainerId
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetAvailabilityResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    /**
     Add new availability
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameterdateq: (query) date (optional)
     
     */
    
    open class func AddNewAvailability(accept: String, date: String? = nil, serviceId: String? = nil,times: NSMutableArray? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        AddNewAvailabilityWithRequestBuilder(accept: accept, date: date,serviceId: serviceId,times: times).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
  

    /**
     Trainers List
     - GET /tranier/all
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */

    open class func AddNewAvailabilityWithRequestBuilder(accept: String, date: String? = nil, serviceId: String? = nil,times: NSMutableArray? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/availability"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "date": date,
            "service_id": serviceId,
            "time": json(from:times as Any)
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    
    
    /**
     Accept Booking
     
     - parameter id: (form) id  (optional)
    
     */
    open class func acceptBooking(accept: String, id: String? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        acceptBookingWithRequestBuilder(accept: accept, id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Accept Booking
     - POST /booking/accept
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter id: (form)  id  (optional)
    

     - returns: RequestBuilder<BookingsAddNewBookingResponse>
     */
    open class func acceptBookingWithRequestBuilder(accept: String, id: String? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/booking/accept"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    /**
     cancel Booking
     
     - parameter id: (form) id  (optional)
    
     */
    open class func cancelBooking(accept: String, id: String? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        cancelBookingWithRequestBuilder(accept: accept, id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     cancel Booking
     - POST /booking/accept
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter id: (form)  id  (optional)
    

     - returns: RequestBuilder<BookingsAddNewBookingResponse>
     */
    open class func cancelBookingWithRequestBuilder(accept: String, id: String? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/booking/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    
    /**
     Get All Paid Bookings
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllPaidBookings(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: BookingListResponse?,_ error: Error?) -> Void)) {
        getAllPaidBookingsWithRequestBuilder(accept: accept, q: q, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get All Paid Bookings
     - GET /booking/paid
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */
    open class func getAllPaidBookingsWithRequestBuilder(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<BookingListResponse> {
        let path = "/booking/paid"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q,
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    /**
     Get All Unpaid Bookings
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUnpaidBookings(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: BookingListResponse?,_ error: Error?) -> Void)) {
        getAllUnpaidBookingsWithRequestBuilder(accept: accept, q: q, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get All Unpaid Bookings
     - GET /booking/unpaid
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter q: (query) Search query (optional)
     - parameter page: (query) Search query (optional)
     - parameter perPage: (query) Search query (optional)

     - returns: RequestBuilder<TranierTrainersListResponse>
     */
    open class func getAllUnpaidBookingsWithRequestBuilder(accept: String, q: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<BookingListResponse> {
        let path = "/booking/unpaid"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q,
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BookingListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
   open class func json(from object:Any) -> String? {
        guard let data = try? JSONSerialization.data(withJSONObject: object, options: []) else {
            return nil
        }
        return String(data: data, encoding: String.Encoding.utf8)
    }
}


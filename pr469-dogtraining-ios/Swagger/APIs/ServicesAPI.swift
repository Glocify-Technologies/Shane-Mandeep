//
// ServicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ServicesAPI {
    /**
     Get All Services
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func servicesGetGetAllServices(accept: String, completion: @escaping ((_ data: ServicesGetAllServicesResponse?,_ error: Error?) -> Void)) {
        servicesGetGetAllServicesWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get All Services
     - GET /services
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<ServicesGetAllServicesResponse> 
     */
    open class func servicesGetGetAllServicesWithRequestBuilder(accept: String) -> RequestBuilder<ServicesGetAllServicesResponse> {
        let path = "/services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ServicesGetAllServicesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    
    /**
     Profile - Update Services

     - parameter photos: (form) photos
     - parameter terms_conditions: (form) terms_conditions
     - parameter certificates: (form) certificates
     - parameter file_id: (form) file_id
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func servicesUpdate(services: NSMutableArray? = nil,accept: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        servicesUpdateWithRequestBuilder(services:services,accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update My Avatar
     - POST /avatar
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter photos: (form) photos
     - parameter terms_conditions: (form) terms_conditions
     - parameter certificates: (form) certificates
     - parameter file_id: (form) file_id
     - parameter accept: (header) Set to &#x60;application/json&#x60;

     - returns: RequestBuilder<ProfileUpdateMyAvatarResponse>
     */
    open class func servicesUpdateWithRequestBuilder(services: NSMutableArray? = nil,accept: String) -> RequestBuilder<SuccessResponse> {
        let path = "/profile/services/update"
        let URLString = SwaggerClientAPI.basePath + path
       
        let formParams: [String:Any?] = [
            "services": json(from: services as Any)
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    open class func json(from object:Any) -> String? {
        guard let data = try? JSONSerialization.data(withJSONObject: object, options: []) else {
            return nil
        }
        return String(data: data, encoding: String.Encoding.utf8)
    }
}

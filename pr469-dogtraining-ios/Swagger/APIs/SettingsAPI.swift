//
// SettingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SettingsAPI {
    /**
     Get Setting
     
     - parameter key: (path) Key of the setting 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func settingsGetGetSetting(key: String, accept: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        settingsGetGetSettingWithRequestBuilder(key: key, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Setting
     - GET /settings/{key}
     - Returns the value of a single app setting requested by key.
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter key: (path) Key of the setting 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func settingsGetGetSettingWithRequestBuilder(key: String, accept: String) -> RequestBuilder<SuccessResponse> {
        var path = "/settings/{key}"
        let keyPreEscape = "\(key)"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Settings
     
     - parameter accept: (header) &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func settingsGetGetSettings(accept: String, completion: @escaping ((_ data: SettingsGetSettingsResponse?,_ error: Error?) -> Void)) {
        settingsGetGetSettingsWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Settings
     - GET /settings
     - Returns all app settings. Each setting value is identified by the respective key.
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) &#x60;application/json&#x60; 

     - returns: RequestBuilder<SettingsGetSettingsResponse> 
     */
    open class func settingsGetGetSettingsWithRequestBuilder(accept: String) -> RequestBuilder<SettingsGetSettingsResponse> {
        let path = "/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SettingsGetSettingsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    
    
    /**
     Settings - Contact Us
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter userMessage: (form) userMessage (optional)
    
     */
    open class func contactUs(accept: String, userMessage: String? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        contactUsWithRequestBuilder(accept: accept, userMessage: userMessage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainer Profile Setup
     - POST /profile/trainer_profile
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter name: (form) full name (optional)
     - parameter phone: (form) mobile number (optional)
     - parameter businessName: (form) business_name (optional)
     - parameter location: (form) business_location (optional)
     - parameter latitude: (form) latitude (optional)
     - parameter longitude: (form) longitude (optional)
     - parameter businessPhoneNumber: (form) business_phone_number (optional)
     - parameter wesbite: (form) website (optional)
     - parameter serviceId: (form) Array of service_ids ex - 1,2,3 (optional)
     - parameter sportTitleId: (form) Array of sport_titles  ex - 1,2,3 (optional)
     - parameter photos: (form) Array of photos (optional)
     - parameter trainingPlace: (form) training place (optional)
     - parameter experienceId: (form) Experince _id, 1,2,3 (optional)
     - parameter termsConditions: (form) terms and conditions (optional)
     - parameter certificates: (form) array of certificates (optional)

     - returns: RequestBuilder<ProfileTrainerProfileSetupResponse>
     */
    open class func contactUsWithRequestBuilder(accept: String, userMessage: String? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/contact-us"
        let URLString = SwaggerClientAPI.basePath + path
        
        let formParams: [String:Any?] = [
            "userMessage": userMessage
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}

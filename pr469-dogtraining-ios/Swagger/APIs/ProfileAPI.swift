//
// ProfileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import SwiftUI



open class ProfileAPI {
    /**
     View My Profile
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profileGetViewMyProfile(accept: String, completion: @escaping ((_ data: ProfileViewMyProfileResponse?,_ error: Error?) -> Void)) {
        profileGetViewMyProfileWithRequestBuilder(accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     View My Profile
     - GET /profile
     - Get currently logged in user's profile
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<ProfileViewMyProfileResponse> 
     */
    open class func profileGetViewMyProfileWithRequestBuilder(accept: String) -> RequestBuilder<ProfileViewMyProfileResponse> {
        let path = "/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileViewMyProfileResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Trainer Profile Setup
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter name: (form) full name (optional)
     - parameter phone: (form) mobile number (optional)
     - parameter businessName: (form) business_name (optional)
     - parameter location: (form) business_location (optional)
     - parameter latitude: (form) latitude (optional)
     - parameter longitude: (form) longitude (optional)
     - parameter businessPhoneNumber: (form) business_phone_number (optional)
     - parameter wesbite: (form) website (optional)
     - parameter serviceId: (form) Array of service_ids ex - 1,2,3 (optional)
     - parameter sportTitleId: (form) Array of sport_titles  ex - 1,2,3 (optional)
     - parameter photos: (form) Array of photos (optional)
     - parameter trainingPlace: (form) training place (optional)
     - parameter experienceId: (form) Experince _id, 1,2,3 (optional)
     - parameter termsConditions: (form) terms and conditions (optional)
     - parameter certificates: (form) array of certificates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilePostTrainerProfileSetup(accept: String, name: String? = nil, phone: String? = nil, businessName: String? = nil, location: String? = nil, latitude: String? = nil, longitude: String? = nil, businessPhoneNumber: String? = nil, wesbite: String? = nil, serviceId: NSMutableArray? = nil, sportTitleId: String? = nil, photos: [NSURL]? = nil, trainingPlace: String? = nil, experienceId: String? = nil, termsConditions: NSURL? = nil, certificates: [NSURL]? = nil, completion: @escaping ((_ data: ProfileTrainerProfileSetupResponse?,_ error: Error?) -> Void)) {
        profilePostTrainerProfileSetupWithRequestBuilder(accept: accept, name: name, phone: phone, businessName: businessName, location: location, latitude: latitude, longitude: longitude, businessPhoneNumber: businessPhoneNumber, wesbite: wesbite, serviceId: serviceId, sportTitleId: sportTitleId, photos: photos, trainingPlace: trainingPlace, experienceId: experienceId, termsConditions: termsConditions, certificates: certificates).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trainer Profile Setup
     - POST /profile/trainer_profile
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter name: (form) full name (optional)
     - parameter phone: (form) mobile number (optional)
     - parameter businessName: (form) business_name (optional)
     - parameter location: (form) business_location (optional)
     - parameter latitude: (form) latitude (optional)
     - parameter longitude: (form) longitude (optional)
     - parameter businessPhoneNumber: (form) business_phone_number (optional)
     - parameter wesbite: (form) website (optional)
     - parameter serviceId: (form) Array of service_ids ex - 1,2,3 (optional)
     - parameter sportTitleId: (form) Array of sport_titles  ex - 1,2,3 (optional)
     - parameter photos: (form) Array of photos (optional)
     - parameter trainingPlace: (form) training place (optional)
     - parameter experienceId: (form) Experince _id, 1,2,3 (optional)
     - parameter termsConditions: (form) terms and conditions (optional)
     - parameter certificates: (form) array of certificates (optional)

     - returns: RequestBuilder<ProfileTrainerProfileSetupResponse> 
     */
    open class func profilePostTrainerProfileSetupWithRequestBuilder(accept: String, name: String? = nil, phone: String? = nil, businessName: String? = nil, location: String? = nil, latitude: String? = nil, longitude: String? = nil, businessPhoneNumber: String? = nil, wesbite: String? = nil, serviceId: NSMutableArray? = nil, sportTitleId: String? = nil, photos: [NSURL]? = nil, trainingPlace: String? = nil, experienceId: String? = nil, termsConditions: NSURL? = nil, certificates: [NSURL]? = nil) -> RequestBuilder<ProfileTrainerProfileSetupResponse> {
        let path = "/profile/trainer_profile"
        let URLString = SwaggerClientAPI.basePath + path
        
        let formParams: [String:Any?] = [
            "name": name,
            "phone": phone,
            "business_name": businessName,
            "location": location,
            "latitude": latitude,
            "longitude": longitude,
            "business_phone_number": businessPhoneNumber,
            "wesbite": wesbite,
            "services": serviceId,
            "sport_title_id": sportTitleId,
            "photos[]": photos,
            "training_place": trainingPlace,
            "experience_id": experienceId,
            "terms_conditions": termsConditions,
            "certificates[]": certificates
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileTrainerProfileSetupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update My Avatar
     
     - parameter image: (form) Image 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilePostUpdateMyAvatar(image: URL, accept: String, completion: @escaping ((_ data: ProfileUpdateMyAvatarResponse?,_ error: Error?) -> Void)) {
        profilePostUpdateMyAvatarWithRequestBuilder(image: image, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update My Avatar
     - POST /avatar
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter image: (form) Image 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 

     - returns: RequestBuilder<ProfileUpdateMyAvatarResponse> 
     */
    open class func profilePostUpdateMyAvatarWithRequestBuilder(image: URL, accept: String) -> RequestBuilder<ProfileUpdateMyAvatarResponse> {
        let path = "/avatar"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileUpdateMyAvatarResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    
    
    /**
     Update My Files
     
     - parameter photos: (form) photos
     - parameter terms_conditions: (form) terms_conditions
     - parameter certificates: (form) certificates
     - parameter file_id: (form) file_id
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilePostUpdateMyFiles(photos: URL?,fileId:String,termsConditions: NSURL?,certificates: URL?, accept: String, completion: @escaping ((_ data: ProfileTrainerProfileSetupResponse?,_ error: Error?) -> Void)) {
        profilePostUpdateMyFilesWithRequestBuilder(photos: photos,fileId:fileId,termsConditions: termsConditions,certificates: certificates, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update My Avatar
     - POST /avatar
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter photos: (form) photos
     - parameter terms_conditions: (form) terms_conditions
     - parameter certificates: (form) certificates
     - parameter file_id: (form) file_id
     - parameter accept: (header) Set to &#x60;application/json&#x60;

     - returns: RequestBuilder<ProfileUpdateMyAvatarResponse>
     */
    open class func profilePostUpdateMyFilesWithRequestBuilder(photos: URL?,fileId:String,termsConditions: NSURL?,certificates: URL?, accept: String) -> RequestBuilder<ProfileTrainerProfileSetupResponse> {
        let path = "/profile/images/update"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file_id":fileId,
            "photos": photos,
            "terms_conditions":termsConditions,
            "certificates":certificates
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileTrainerProfileSetupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    
    
    /**
     Update My Profile
     
     - parameter firstName: (form) First name 
     - parameter email: (form) Email 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter lastName: (form) Last name (optional)
     - parameter phone: (form) Phone (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilePutUpdateMyProfile(firstName: String, email: String, accept: String, lastName: String? = nil, phone: String? = nil, completion: @escaping ((_ data: ProfileUpdateMyProfileResponse?,_ error: Error?) -> Void)) {
        profilePutUpdateMyProfileWithRequestBuilder(firstName: firstName, email: email, accept: accept, lastName: lastName, phone: phone).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update My Profile
     - PUT /profile
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter firstName: (form) First name 
     - parameter email: (form) Email 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter lastName: (form) Last name (optional)
     - parameter phone: (form) Phone (optional)

     - returns: RequestBuilder<ProfileUpdateMyProfileResponse> 
     */
    open class func profilePutUpdateMyProfileWithRequestBuilder(firstName: String, email: String, accept: String, lastName: String? = nil, phone: String? = nil) -> RequestBuilder<ProfileUpdateMyProfileResponse> {
        let path = "/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "first_name": firstName,
            "last_name": lastName,
            "email": email,
            "phone": phone
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileUpdateMyProfileResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     User Profile Setup
     
     - parameter name: (form) full name 
     - parameter phone: (form) mobile number 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter location: (form) location (optional)
     - parameter latitude: (form) latitude (optional)
     - parameter longitude: (form) longitude (optional)
     - parameter age: (form) age (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilePutUserProfileSetup(name: String, phone: String, accept: String, location: String? = nil, latitude: String? = nil, longitude: String? = nil, age: String? = nil, completion: @escaping ((_ data: ProfileUserProfileSetupResponse?,_ error: Error?) -> Void)) {
        profilePutUserProfileSetupWithRequestBuilder(name: name, phone: phone, accept: accept, location: location, latitude: latitude, longitude: longitude, age: age).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete My Files
     
     - parameter photos: (form) photos
     - parameter terms_conditions: (form) terms_conditions
     - parameter certificates: (form) certificates
     - parameter file_id: (form) file_id
     - parameter accept: (header) Set to &#x60;application/json&#x60;
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profileDeleteMyFiles(fileId:String, accept: String, completion: @escaping ((_ data: ApiErrorAccessDenied?,_ error: Error?) -> Void)) {
        profileDeleteMyFilesWithRequestBuilder(file_id: fileId, accept: accept).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    /**
     Delete File
     - DELETE /profile
     -
     - API Key:
       - type: apiKey x-access-token
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter file_id: (form) File id
  

     - returns: RequestBuilder<ProfileUpdateMyProfileResponse>
     */
    open class func profileDeleteMyFilesWithRequestBuilder(file_id:String, accept: String) -> RequestBuilder<ApiErrorAccessDenied> {
        let path = "/profile/images"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file_id": file_id
          
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiErrorAccessDenied>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    


    
    
    /**
     User Profile Setup
     - PUT /profile/user_profile
     - 
     - API Key:
       - type: apiKey x-access-token 
       - name: accessToken
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter name: (form) full name 
     - parameter phone: (form) mobile number 
     - parameter accept: (header) Set to &#x60;application/json&#x60; 
     - parameter location: (form) location (optional)
     - parameter latitude: (form) latitude (optional)
     - parameter longitude: (form) longitude (optional)
     - parameter age: (form) age (optional)

     - returns: RequestBuilder<ProfileUserProfileSetupResponse> 
     */
    open class func profilePutUserProfileSetupWithRequestBuilder(name: String, phone: String, accept: String, location: String? = nil, latitude: String? = nil, longitude: String? = nil, age: String? = nil) -> RequestBuilder<ProfileUserProfileSetupResponse> {
        let path = "/profile/user_profile"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name,
            "location": location,
            "latitude": latitude,
            "longitude": longitude,
            "phone": phone,
            "age": age
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileUserProfileSetupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
